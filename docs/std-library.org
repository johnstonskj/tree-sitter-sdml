#+LANGUAGE: en
#+STARTUP: overview hidestars inlineimages entitiespretty

* Appendix: Standard Library

The following are standard modules that are included with the command-line tool.

#+NAME: tbl:std-library
#+CAPTION: Standards Library Modules
| Name         | Corresponding URI                             | Comment     |
|--------------+-----------------------------------------------+-------------|
| =dc=           | <http://purl.org/dc/elements/1.1/>            | Complete    |
| =dcam=         | <http://purl.org/dc/dcam/>                    | Complete    |
| =dcmi_type=    | <http://purl.org/dc/dcmitype/>                | Complete    |
| =dcterms=      | <http://purl.org/dc/terms/>                   | Complete    |
| =owl=          | <http://www.w3.org/2002/07/owl#>              | In Progress |
| =rdf=          | <http://www.w3.org/1999/02/22-rdf-syntax-ns#> | Complete    |
| =rdfs=         | <http://www.w3.org/2000/01/rdf-schema#>       | Complete    |
| *=sdml=*       | *<https://sdml.io/sdml-owl.ttl#>*               | In Progress |
| *=sdml_types=* | *<https://sdml.io/sdml-types.ttl#>*             | Complete    |
| =skos=         | <http://www.w3.org/2004/02/skos/core#>        | Complete    |
| =xml=          | <http://www.w3.org/XML/1998/namespace>        | In Progress |
| =xsd=          | <http://www.w3.org/2001/XMLSchema#>           | In Progress |

** SDML Modules


#+BEGIN_SRC sdml :noeval
module sdml base <http://sdml.io/> is
end
#+END_SRC

#+BEGIN_SRC sdml :noeval
module sdml_types base <http://sdml.io/> is
end
#+END_SRC

** Commonly Used Modules

*** Module: Dublin Core Elements (dc)

This module 

#+BEGIN_SRC sdml :noeval
module dc base <http://purl.org/dc/elements/1.1/> is
  structure contributor ;; ...
  structure coverage ;; ...
  structure creator ;; ...
  structure date ;; ...
  structure description ;; ...
  structure format ;; ...
  structure identifier ;; ...
  structure language ;; ...
  structure publisher ;; ...
  structure relation ;; ...
  structure rights ;; ...
  structure source ;; ...
  structure subject ;; ...
  structure title ;; ...
  structure type ;; ...
end
#+END_SRC

*** Module:  (dcam)

This module 

#+BEGIN_SRC sdml :noeval
module dcam base <http://purl.org/dc/dcam/> is
  structure VocabularyEncodingScheme ;; ...
  structure domainIncludes ;; ...
  structure memberOf ;; ...
  structure rangeIncludes ;; ...
end
#+END_SRC

*** Module:  (dcmi__type)

This module 

#+BEGIN_SRC sdml :noeval
module dcmi_type base <http://purl.org/dc/dcmitype/> is
 structure Collection ;; ...
  structure Dataset ;; ...
  structure Event ;; ...
  structure Image ;; ...
  structure InteractiveResource ;; ...
  structure MovingImage ;; ...
  structure PhysicalObject ;; ...
  structure Service ;; ...
  structure Software ;; ...
  structure Sound ;; ...
  structure StillImage ;; ...
  structure Text ;; ...
end
#+END_SRC

*** Module:  (dcterms)

This module 

#+BEGIN_SRC sdml :noeval
module dcterms base <http://purl.org/dc/terms/> is
  structure Agent ;; ...
  structure AgentClass ;; ...
  structure BibliographicResource ;; ...
  structure Box ;; ...
  structure DCMIType ;; ...
  structure DDC ;; ...
  structure FileFormat ;; ...
  structure Frequency ;; ...
  structure IMT ;; ...
  structure ISO3166 ;; ...
  structure ISO639_2 ;; ...
  structure ISO639_3 ;; ...
  structure Jurisdiction ;; ...
  structure LLC ;; ...
  structure LCSH ;; ...
  structure LicenseDocument ;; ...
  structure LinguisticSystem ;; ...
  structure Location ;; ...
  structure LocationPeriodOrJurisdiction ;; ...
  structure MESH ;; ...
  structure MediaType ;; ...
  structure MediaTypeOrExtent ;; ...
  structure MethodOfAccrual ;; ...
  structure MethodOfInstruction ;; ...
  structure NLM ;; ...
  structure Period ;; ...
  structure PeriodOfTime ;; ...
  structure PhysicalMedium ;; ...
  structure PhysicalResource ;; ...
  structure Point ;; ...
  structure Policy ;; ...
  structure ProvenanceStatement ;; ...
  structure RFC1766 ;; ...
  structure RFC3066 ;; ...
  structure RFC4646 ;; ...
  structure RFC5646 ;; ...
  structure RightsStatement ;; ...
  structure SizeOrDuration ;; ...
  structure Standard ;; ...
  structure TGN ;; ...
  structure UDC ;; ...
  structure URI ;; ...
  structure WthreeCDTF ;; ...
  structure abstract ;; ...
  structure accessRights ;; ...
  structure accrualMethod ;; ...
  structure accrualPeriodicity ;; ...
  structure accrualPolicy ;; ...
  structure alternative ;; ...
  structure audience ;; ...
  structure available ;; ...
  structure bibliographicCitation ;; ...
  structure conformsTo ;; ...
  structure contributor ;; ...
  structure coverage ;; ...
  structure created ;; ...
  structure creator ;; ...
  structure date ;; ...
  structure dateCopyrighted ;; ...
  structure dateSubmitted ;; ...
  structure description ;; ...
  structure educationLevel ;; ...
  structure extent ;; ...
  structure forma ;; ...
  structure hasFormat ;; ...
  structure hasPart ;; ...
  structure hasVersion ;; ...
  structure identifier ;; ...
  structure instructionalMethod ;; ...
  structure isFormatOf ;; ...
  structure isPartOf ;; ...
  structure isReferencedBy ;; ...
  structure isReplacedBy ;; ...
  structure isRequiredBy ;; ...
  structure isVersionOf ;; ...
  structure issued ;; ...
  structure language ;; ...
  structure license ;; ...
  structure mediator ;; ...
  structure medium ;; ...
  structure modified ;; ...
  structure provenance ;; ...
  structure publisher ;; ...
  structure references ;; ...
  structure relation ;; ...
  structure replaces ;; ...
  structure requires ;; ...
  structure rights ;; ...
  structure rightsHolder ;; ...
  structure source ;; ...
  structure spatial ;; ...
  structure subject ;; ...
  structure tableOfContents ;; ...
  structure temporal ;; ...
  structure title ;; ...
  structure type ;; ...
  structure valid ;; ...
end
#+END_SRC

*** Module:  (owl)

This module 

#+BEGIN_SRC sdml :noeval
#+END_SRC

*** Module:  (rdf)

This module 

#+BEGIN_SRC sdml :noeval
module rdf base <http://www.w3.org/1999/02/22-rdf-syntax-ns#> is
  structure Alt ;; ...
  structure Bag ;; ...
  structure CompoundLiteral ;; ...
  structure HTML  ;; ...
  structure JSON ;; ...
  structure List ;; ...
  structure PlainLiteral ;; ...
  structure Property ;; ...
  structure Seq ;; ...
  structure Statement ;; ...
  structure XMLLiteral ;; ...
  structure direction
  structure first ;; ...
  structure langString ;; ...
  structure language ;; ...
  structure nil ;; ...
  structure object ;; ...
  structure predicate ;; ...
  structure rest ;; ...
  structure subject ;; ...
  structure type ;; ...
  structure value ;; ...
end
#+END_SRC

*** Module:  (rdfs)

This module 

#+BEGIN_SRC sdml :noeval
module rdfs base <http://www.w3.org/2000/01/rdf-schema#> is
  structure Class ;; ...
  structure Container ;; ...
  structure ContainerMembershipProperty  ;; ...
  structure Datatype ;; ...
  structure Literal ;; ...
  structure Resource ;; ...
  structure comment ;; ...
  structure domain ;; ...
  structure isDefinedBy ;; ...
  structure label ;; ...
  structure member ;; ...
  structure range ;; ...
  structure seeAlso ;; ...
  structure subClassOf ;; ...
  structure subPropertyOf ;; ...
end
#+END_SRC

*** Module:  (skos)

This module 

#+BEGIN_SRC sdml :noeval
module skos base <http://www.w3.org/2004/02/skos/core#> is
  structure Collection  ;; ...
  structure Concept ;; ...
  structure ConceptScheme ;; ...
  structure OrderedCollection ;; ...
  structure altLabel ;; ...
  structure broadMatch ;; ...
  structure broader ;; ...
  structure broaderTransitive ;; ...
  structure changeNote ;; ...
  structure closeMatch ;; ...
  structure definition ;; ...
  structure editorialNote ;; ...
  structure exactMatch ;; ...
  structure example ;; ...
  structure hasTopConcept ;; ...
  structure hiddenLabel ;; ...
  structure historyNote ;; ...
  structure inScheme ;; ...
  structure mappingRelation ;; ...
  structure member ;; ...
  structure memberList ;; ...
  structure narrowMatch ;; ...
  structure narrower ;; ...
  structure narrowerTransitive ;; ...
  structure notation ;; ...
  structure note ;; ...
  structure prefLabel ;; ...
  structure related ;; ...
  structure relatedMatch ;; ...
  structure scopeNote ;; ...
  structure semanticRelation ;; ...
  structure topConceptOf ;; ...
end
#+END_SRC

*** Module:  (xml)

This module 

#+BEGIN_SRC sdml :noeval
#+END_SRC

*** Module:  (xsd)

This module 

#+BEGIN_SRC sdml :noeval
#+END_SRC

** Constraint Language Library

Note that all of the predicates, relations, and functions in this section exist within the ~sdml~ module scope but
qualification is optional unless the application is ambiguous in a particular context.

*** Equality and Inequality

#+BEGIN_EXAMPLE
def eq(Any Any) -> boolean
#+END_EXAMPLE

Returns ~true~ if the two values are equal, else ~false~.

#+BEGIN_EXAMPLE
def gt(Any Any) -> boolean
#+END_EXAMPLE

Returns ~true~ if the first value is greater than the second, else ~false~.

#+BEGIN_EXAMPLE
def gte(v1 -> Any v2 -> Any) -> boolean
    ≔ gt(v1 v2) ∨ eq(v1 v2)
#+END_EXAMPLE

Returns ~true~ if the first value is greater than or equal to the second, else ~false~.

#+BEGIN_EXAMPLE
def lt(v1 -> Any v2 -> Any) -> boolean
    ≔ ¬gte(v1 v2)
#+END_EXAMPLE

Returns ~true~ if the first value is less than the second, else ~false~.

#+BEGIN_EXAMPLE
def lte(v1 -> Any v2 -> Any) -> boolean
    ≔ ¬gt(v1 v2)
#+END_EXAMPLE

Returns ~true~ if the first value is less than or equal to the second, else ~false~.

#+BEGIN_EXAMPLE
def ne(v1 -> Any v2 -> Any) -> boolean
    ≔ ¬eq(v1 v2)
#+END_EXAMPLE

Returns ~true~ if the two values are not equal, else ~false~.

*** Metaclasses

*Class: Any*

#+BEGIN_EXAMPLE
def class_of(Any) -> Class
#+END_EXAMPLE

example: ~class_of(rentals:Customer) = sdml:Entity~

*Class: Class*

#+BEGIN_EXAMPLE
def name(Class) -> string
#+END_EXAMPLE

example: ~name(class_of(rentals:Customer)) = "sdml:Entity"~

*Class: Type*

#+BEGIN_EXAMPLE
def name(Type) -> IdentifierReference
#+END_EXAMPLE

*** Identifiers

*Class: Identifier*

#+BEGIN_EXAMPLE
def Identifier(Any) → boolean
#+END_EXAMPLE

*Class: QualifiedIdentifier*

#+BEGIN_EXAMPLE
def QualifiedIdentifier(Any) → boolean
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def member(QualifiedIdentifier) -> Identifier
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def module(QualifiedIdentifier) -> Identifier
#+END_EXAMPLE

*Union: IdentifierReference*

#+BEGIN_EXAMPLE
def IdentifierReference(Any) → boolean
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def as_dentifier(IdentifierReference) -> Maybe of Identifier
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def as_qualified_identifier(IdentifierReference) -> Maybe of QualifiedIdentifier
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def is_identifier(IdentifierReference) -> boolean
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def is_qualified_identifier(IdentifierReference) -> boolean
#+END_EXAMPLE

*** Module Definition

*Class: Module*

#+BEGIN_EXAMPLE
def Module(Any) → boolean
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def annotations(Module) -> Bag of Annotation
#+END_EXAMPLE

Returns an unordered sequence of annotations attached to the module.

#+BEGIN_EXAMPLE
def base_uri(Module) -> Maybe of iri
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def definitions(Module) -> Set of Definition
#+END_EXAMPLE

Returns an unordered, unique, sequence of variants contained within the union.

#+BEGIN_EXAMPLE
def imports(Module) -> Set of ImportStatement
#+END_EXAMPLE

Returns an unordered, unique, sequence of import statements.

#+BEGIN_EXAMPLE
def is_complete(m -> Module) -> boolean
    ≔ ∀ d ∈ definitions(m) ( is_complete(d) )
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def name(Module) -> Identifier
#+END_EXAMPLE

Returns the identifier naming the module.

#+BEGIN_EXAMPLE
def resolved_uri(Module) -> iri
#+END_EXAMPLE

*Union: Definition*

#+BEGIN_EXAMPLE
def Definition(Any) → boolean
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def as_datatype(Definition) -> Maybe of Datatype
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def as_entity(Definition) -> Maybe of Entity
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def as_enumeration(Definition) -> Maybe of Enumeration
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def as_event(Definition) -> Maybe of Event
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def as_structure(Definition) -> Maybe of Structure
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def as_property(Definition) -> Maybe of Property
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def is_datatype(Definition) -> boolean
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def is_entity(Definition) -> boolean
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def is_enumeration(Definition) -> boolean
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def is_event(Definition) -> boolean
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def is_structure(Definition) -> boolean
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def is_property(Definition) -> boolean
#+END_EXAMPLE

*** Imports

*Class: ImportStatement*

#+BEGIN_EXAMPLE
def ImportStatement(Any) → boolean
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def imports(ImportStatement) -> Bag of Import
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def member_imports(i -> ImportStatement)
    ≔ {i | i ∈ imports(i) ∧ MemberImport(i)}
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def module_imports(i -> ImportStatement)
    ≔ {i | i ∈ imports(i) ∧ ModuleImport(i)}
#+END_EXAMPLE

*Class: Import*

#+BEGIN_EXAMPLE
def Import(Any) → boolean
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def is_module_import(Import) -> boolean
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def is_member_import(Import) -> boolean
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def as_module_import(Import) -> Maybe of ModuleImport
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def as_member_import(Import) -> Maybe of MemberImport
#+END_EXAMPLE

*Class: ModuleImport*

#+BEGIN_EXAMPLE
def ModuleImport(Any) → boolean
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def module(ModuleImport) -> Identifier
#+END_EXAMPLE

*Class: MemberImport*

#+BEGIN_EXAMPLE
def MemberImport(Any) → boolean
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def module(MemberImport) -> Identifier
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def member(MemberImport) -> Identifier
#+END_EXAMPLE

*** Datatypes and Values

*Class: Datatype*

#+BEGIN_EXAMPLE
def Datatype(Any) → boolean
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def base_type(Datatype) -> Maybe of Datatype
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def contained_within(Datatype) -> Module
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def name(Datatype) -> IdentifierReference
#+END_EXAMPLE

*Datatype: decimal*

#+BEGIN_EXAMPLE
def Decimal(Any) → boolean
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def whole_part(decimal) -> decimal
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def decimal_part(decimal) -> decimal
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def round(decimal) -> decimal
#+END_EXAMPLE

*Datatype: double*

#+BEGIN_EXAMPLE
def Double(Any) → boolean
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def whole_part(double) -> double
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def decimal_part(double) -> double
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def round(double) -> double
#+END_EXAMPLE

*Datatype: integer*

#+BEGIN_EXAMPLE
def Integer(Any) → boolean
#+END_EXAMPLE

*Datatype: iri*

#+BEGIN_EXAMPLE
def Iri(Any) → boolean
#+END_EXAMPLE

TBD

*Datatype: language*

#+BEGIN_EXAMPLE
def Language(Any) → boolean
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def broader(languageTag languageTag) -> boolean
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def language_extended_part(languageTag) -> string
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def language_part(languageTag) -> string
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def narrower(languageTag languageTag) -> boolean
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def region_part(languageTag) -> string
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def script_part(languageTag) -> string
#+END_EXAMPLE

*Datatype: string*

#+BEGIN_EXAMPLE
def String(Any) → boolean
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def contains(string substring -> string) -> boolean
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def eq_ci(string string) -> boolean
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def language_part(string) -> language
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def length(string) -> integer
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def matches(string regex -> string) -> boolean
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def ne_ci(string string) -> boolean
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def prefix(string prefix -> string) -> boolean
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def quoted_part(string) -> string
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def suffix(string suffix -> string) -> boolean
#+END_EXAMPLE

*** Sequence Types

*Class: Sequence*

#+BEGIN_EXAMPLE
def Sequence(Any) → boolean
#+END_EXAMPLE

Returns ~true~ if the value is of type ~Sequence~ or any sub-type of ~Sequence~, else ~false~.

#+BEGIN_EXAMPLE
def contains(s → Sequence of Any t → element of Any) → boolean
    ≔ ¬is_empty({ e | e ∈ s ∧ e = t})
#+END_EXAMPLE

Returns ~true~ if the sequence ~s~ contains the element ~t~, else ~false~.

#+BEGIN_EXAMPLE
def count(Sequence of Any) → unsigned
#+END_EXAMPLE

Returns the number of elements in the sequence.

#+BEGIN_EXAMPLE
def into_bag(seq → Sequence of Any) → Bag of Any
#+END_EXAMPLE

Transforms the input sequence into a ~Bag~, this *may* remove ordering and uniqueness constraints from the input sequence
but *will not* remove any elements.

#+BEGIN_EXAMPLE
def into_list(seq → Sequence of Any) → List of Any
#+END_EXAMPLE

Transforms the input sequence into a ~List~, this *may* add ordering and remove uniqueness constraints from the input sequence
but *will not* remove any elements.

#+BEGIN_EXAMPLE
def into_ordered_set(seq → Sequence of Any) → OrderedSet of Any
#+END_EXAMPLE

Transforms the input sequence into a ~OrderedSet~, this *may* add both ordering and uniqueness constraints to the input sequence
and *will* remove duplicate elements.

#+BEGIN_EXAMPLE
def into_set(seq → Sequence of Any) → Set of Any
#+END_EXAMPLE

Transforms the input sequence into a ~Set~, this *may* remove ordering and add uniqueness constraints to the input sequence
and *will* remove duplicate elements.

#+BEGIN_EXAMPLE
def is_empty(seq → Sequence of Any) → boolean
    ≔ count(seq) = 0
#+END_EXAMPLE

Return ~true~ if the sequence has no elements, else ~false~.

#+BEGIN_EXAMPLE
def is_ordered(t → Type) → boolean
    ≔ t = List ∨ t = OrderedSet
#+END_EXAMPLE

Returns ~true~ if the provided type ~t~ is an ordered sequence, else ~false~.

#+BEGIN_EXAMPLE
def is_unique(t → Type) → boolean
    ≔ t = Set ∨ t = OrderedSet
#+END_EXAMPLE

Returns ~true~ if the provided type ~t~ is a sequence that guarantees uniqueness of elements, else ~false~.

*Class: Bag*

#+BEGIN_EXAMPLE
def Bag(Any) → boolean
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def order(Bag of Any count -> integer) -> List of Any
#+END_EXAMPLE

*Class: List*

#+BEGIN_EXAMPLE
def List(Any) → boolean
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def drop(List of Any count -> unsigned) -> List of Any
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def get(List of Any index -> unsigned) -> Any
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def order(List of Any) -> List of Any
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def reverse(List of Any) -> List of Any
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def slice(List of Any start -> unsigned count -> unsigned) -> List of Any
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def take(List of Any count -> unsigned) -> List of Any
#+END_EXAMPLE

*Class: Maybe*

#+BEGIN_EXAMPLE
def Maybe(Any) → boolean
#+END_EXAMPLE

*Class: OrderedSet*

#+BEGIN_EXAMPLE
def OrderedSet(Any) → boolean
#+END_EXAMPLE

#+BEGIN_EXAMPLE
drop(OrderedSet of Any count -> unsigned) -> OrderedSet of Any
#+END_EXAMPLE

#+BEGIN_EXAMPLE
get(OrderedSet of Any index -> unsigned) -> Any
#+END_EXAMPLE

#+BEGIN_EXAMPLE
intersection(lhs -> OrderedSet of unknown rhs -> OrderedSet of unknown) -> OrderedSet of Any
#+END_EXAMPLE

#+BEGIN_EXAMPLE
is_strict_subset(lhs -> OrderedSet of Any rhs -> OrderedSet of Any) -> boolean
    ≔ is_subset(lhs rhs) ∧ ¬eq(lhs rhs)
#+END_EXAMPLE

#+BEGIN_EXAMPLE
is_strict_superset(lhs -> OrderedSet of Any rhs -> OrderedSet of Any) -> boolean
    ≔ is_superset(lhs rhs) ∧ ¬eq(lhs rhs)
#+END_EXAMPLE

#+BEGIN_EXAMPLE
is_subset(lhs -> OrderedSet of Any rhs -> OrderedSet of Any) -> boolean
#+END_EXAMPLE

#+BEGIN_EXAMPLE
is_superset(lhs -> OrderedSet of Any rhs -> OrderedSet of Any) -> boolean
#+END_EXAMPLE

#+BEGIN_EXAMPLE
minus -> OrderedSet of unknown rhs -> OrderedSet of unknown) -> OrderedSet of Any
#+END_EXAMPLE

#+BEGIN_EXAMPLE
reverse(OrderedSet of Any) -> OrderedSet of Any
#+END_EXAMPLE

#+BEGIN_EXAMPLE
slice(OrderedSet of Any start -> unsigned count -> unsigned) -> OrderedSet of Any
#+END_EXAMPLE

#+BEGIN_EXAMPLE
take(OrderedSet of Any count -> unsigned) -> OrderedSet of Any
#+END_EXAMPLE

#+BEGIN_EXAMPLE
union(OrderedSet of Any rhs -> OrderedSet of Any) -> OrderedSet of Any
#+END_EXAMPLE

*Class: Set*

#+BEGIN_EXAMPLE
def Set(Any) → boolean
#+END_EXAMPLE

#+BEGIN_EXAMPLE
intersection(lhs -> Set of Any rhs -> Set of Any) -> Set of Any
#+END_EXAMPLE

#+BEGIN_EXAMPLE
is_strict_subset(lhs -> Set of Any rhs -> Set of Any) -> boolean
    ≔ is_subset(lhs rhs) ∧ ¬eq(lhs rhs)
#+END_EXAMPLE

#+BEGIN_EXAMPLE
is_strict_superset(lhs -> Set of Any rhs -> Set of Any) -> boolean
    ≔ is_superset(lhs rhs) ∧ ¬eq(lhs rhs)
#+END_EXAMPLE

#+BEGIN_EXAMPLE
is_subset(lhs -> Set of Any rhs -> Set of Any) -> boolean
#+END_EXAMPLE

#+BEGIN_EXAMPLE
is_superset(lhs -> Set of Any rhs -> Set of Any) -> boolean
#+END_EXAMPLE

#+BEGIN_EXAMPLE
minus(lhs -> Set of Any rhs -> Set of Any) -> Set of Any
#+END_EXAMPLE

#+BEGIN_EXAMPLE
order(Set of Any) -> OrderedSet of Any
#+END_EXAMPLE

#+BEGIN_EXAMPLE
union(lhs -> Set of Any rhs -> Set of Any) -> Set of Any
#+END_EXAMPLE

*** Annotations

*Class Annotation*

#+BEGIN_EXAMPLE
def Annotation(Any) → boolean
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def as_annotation_property(Annotation) -> Maybe of AnnotationProperty
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def as_constraint(Annotation) -> Maybe of Constraint
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def is_annotation_property(Annotation) -> boolean
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def is_constraint(Annotation) -> boolean
#+END_EXAMPLE

*Class AnnotationProperty*

#+BEGIN_EXAMPLE
def AnnotationProperty(Any) → boolean
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def name(AnnotationProperty) -> IdentiferReference
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def value(AnnotationProperty) -> Value
#+END_EXAMPLE

*Class Constraint*

#+BEGIN_EXAMPLE
def Constraint(Any) → boolean
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def as_formal(Constraint) -> Maybe of FormalConstraint
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def as_informal(Constraint) -> Maybe of string
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def is_formal(Constraint) -> boolean
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def is_informal(Constraint) -> boolean
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def name(Constraint) -> Maybe of Identifier
#+END_EXAMPLE

*Annotation Collections*

#+BEGIN_EXAMPLE
def annotation_properties(as -> Bag of Annotation)
    ≔ {a | a ∈ as ∧ AnnotationProperty(a)}
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def constraints(as - > Bag of Annotation)
    ≔ {a | a ∈ as ∧ Constraint(a)}
#+END_EXAMPLE

*** Structured Type Members

*Class: Member*

#+BEGIN_EXAMPLE
def Member(Any) → boolean
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def annotations(Member) -> Bag of Annotation
#+END_EXAMPLE

Returns the identifier naming the member.

#+BEGIN_EXAMPLE
def container(Member) -> Type
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def is_complete(m -> Member) -> boolean
    ≔ ne(type_of(m) Unknown)
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def name(Member) -> Identifier
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def target_type(Member) -> Type
#+END_EXAMPLE

*Class: IdentityMember*

#+BEGIN_EXAMPLE
def IdentityMember(Any) → boolean
#+END_EXAMPLE

*Class: ByReferenceMember*

#+BEGIN_EXAMPLE
def ByReferenceMember(Any) → boolean
#+END_EXAMPLE

*Class: ByValueMember*

#+BEGIN_EXAMPLE
def ByValueMember(Any) → boolean
#+END_EXAMPLE

*Class: Cardinality*

#+BEGIN_EXAMPLE
def Cardinality(Any) → boolean
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def is_optional(c -> Cardinality) -> boolean
    ≔ min(c) = 0 ∧ eq(max(c) 1)
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def is_range(Cardinality) -> boolean
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def is_range_unbounded(c -> Cardinality) -> boolean
    ≔ is_range(c) ∧ is_empty(max(c))
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def max(Cardinality) -> Maybe of unsigned
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def min(Cardinality) -> unsigned
#+END_EXAMPLE

*** Entities

*Class: Entity*

#+BEGIN_EXAMPLE
def Entity(Any) → boolean
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def annotations(Entity) -> Bag of Annotation
#+END_EXAMPLE

Returns an unordered sequence of annotations attached to the entity.

#+BEGIN_EXAMPLE
def container(Entity) -> Module
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def flat_members(Entity) -> Set of EntityMember
#+END_EXAMPLE

Returns an unordered, unique, sequence of variants contained within the union.
#+BEGIN_EXAMPLE
def groups(Entity) -> Set of EntityGroup
#+END_EXAMPLE

Returns an unordered, unique, sequence of variants contained within the union.

#+BEGIN_EXAMPLE
def identity(Entity) -> IdentityMember
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def members(Entity) -> Set of EntityMember
#+END_EXAMPLE

Returns an unordered, unique, sequence of variants contained within the union.

#+BEGIN_EXAMPLE
def name(Entity) -> Identifier
#+END_EXAMPLE

Returns the identifier naming the entity.


*Class: EntityGroup*

#+BEGIN_EXAMPLE
def EntityGroup(Any) → boolean
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def annotations(EntityGroup) -> Bag of Annotation
#+END_EXAMPLE

Returns an unordered sequence of annotations attached to the entity group.

#+BEGIN_EXAMPLE
def container(EntityGroup) -> Entity
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def members(EntityGroup) -> Set of EntityMember
#+END_EXAMPLE

Returns an unordered, unique, sequence of variants contained within the union.

*Union: EntityMember*

#+BEGIN_EXAMPLE
def EntityMember(Any) → boolean
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def as_by_reference(EntityMember) -> Maybe of ByReferenceMember
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def as_by_value(EntityMember) -> Maybe of ByValueMember
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def is_by_reference(EntityMember) -> boolean
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def is_by_value(EntityMember) -> boolean
#+END_EXAMPLE

*** Entity Events

*Class: Event*

#+BEGIN_EXAMPLE
def Event(Any) → boolean
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def annotations(Event) -> Bag of Annotation
#+END_EXAMPLE

Returns an unordered sequence of annotations attached to the event.

#+BEGIN_EXAMPLE
def container(Event) -> Module
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def flat_members(Event) -> Set of ByValueMember
#+END_EXAMPLE

Returns an unordered, unique, sequence of variants contained within the union.

#+BEGIN_EXAMPLE
def groups(Event) -> Set of StructureGroup
#+END_EXAMPLE

Returns an unordered, unique, sequence of variants contained within the union.

#+BEGIN_EXAMPLE
def members(Event) -> Set of ByValueMember
#+END_EXAMPLE

Returns an unordered, unique, sequence of variants contained within the union.

#+BEGIN_EXAMPLE
def name(Event) -> Identifier
#+END_EXAMPLE

Returns the identifier naming the event.

#+BEGIN_EXAMPLE
def source(Event) -> IdentifierReference
#+END_EXAMPLE

*** Enumerations

*Class: Enumeration*

#+BEGIN_EXAMPLE
def Enumeration(Any) → boolean
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def annotations(Enumeration) -> Bag of Annotation
#+END_EXAMPLE

Returns an unordered sequence of annotations attached to the enumeration.

#+BEGIN_EXAMPLE
def container(Enumeration) -> Module
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def is_complete(e -> Enumeration) -> boolean ≔ ¬has_body(e)
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def name(Enumeration) -> Identifier
#+END_EXAMPLE

Returns the identifier naming the enum.

#+BEGIN_EXAMPLE
def variants(Enumeration) -> OrderedSet of EnumVariant
#+END_EXAMPLE

Returns an ordered, unique, sequence of variants contained within the enumeration.

*Class: EnumVariant*

#+BEGIN_EXAMPLE
def EnumVariant(Any) → boolean
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def annotations(EnumVariant) -> Bag of Annotation
#+END_EXAMPLE

Returns an unordered sequence of annotations attached to the enumeration variant.

#+BEGIN_EXAMPLE
def container(EnumVariant) -> Enumeration
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def name(EnumVariant) -> Identifier
#+END_EXAMPLE

Returns the identifier naming the enumeration variant.

#+BEGIN_EXAMPLE
def value(EnumVariant) -> integer
#+END_EXAMPLE

*** Structures

*Class: Structure*

#+BEGIN_EXAMPLE
def Structure(Any) → boolean
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def annotations(Structure) -> Bag of Annotation
#+END_EXAMPLE

Returns an unordered sequence of annotations attached to the structure.

#+BEGIN_EXAMPLE
def container(Structure) -> Module
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def flat_members(Structure) -> Set of ByValueMember
#+END_EXAMPLE

Returns an unordered, unique, sequence of members contained within the structure and all of it's groups.

#+BEGIN_EXAMPLE
def groups(Structure) -> Set of StructureGroup
#+END_EXAMPLE

Returns an unordered, unique, sequence of groups contained within the structure.

#+BEGIN_EXAMPLE
def members(Structure) -> Set of ByValueMember
#+END_EXAMPLE

Returns an unordered, unique, sequence of members contained within the structure.

#+BEGIN_EXAMPLE
def name(Structure) -> Identifier
#+END_EXAMPLE

Returns the identifier naming the structure.

*Class: StructureGroup*

#+BEGIN_EXAMPLE
def StructureGroup(Any) → boolean
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def annotations(StructureGroup) -> Bag of Annotation
#+END_EXAMPLE

Returns an unordered sequence of annotations attached to the structure group.

#+BEGIN_EXAMPLE
def contained_within(StructureGroup) -> Structure
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def members(StructureGroup) -> Set of ByValueMember
#+END_EXAMPLE

Returns an unordered, unique, sequence of members contained within the structure group.

*** Disjoint Unions

*Class: Union*

#+BEGIN_EXAMPLE
def Union(Any) → boolean
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def annotations(Union) -> Bag of Annotation
#+END_EXAMPLE

Returns an unordered sequence of annotations attached to the union.

#+BEGIN_EXAMPLE
def container(Union) -> Module
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def is_complete(u -> Union) -> boolean
    ≔ ¬has_body(u)
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def name(Union) -> Identifier
#+END_EXAMPLE

Returns the identifier naming the union.

#+BEGIN_EXAMPLE
def variants(Union) -> Set of TypeVariant
#+END_EXAMPLE

Returns an unordered, unique, sequence of variants contained within the union.

*Class: TypeVariant*

#+BEGIN_EXAMPLE
def TypeVariant(Any) → boolean
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def annotations(TypeVariant) -> Bag of Annotation
#+END_EXAMPLE

Returns an unordered sequence of annotations attached to the type variant.

#+BEGIN_EXAMPLE
def container(TypeVariant) -> union
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def is_renamed(PropertyRole) -> boolean
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def name(TypeVariant) -> Identifier
#+END_EXAMPLE

Returns the identifier naming the type variant.

#+BEGIN_EXAMPLE
def renamed_as(PropertyRole) -> Maybe of Identifier
#+END_EXAMPLE

*** Property Definitions

*Class: Property*

#+BEGIN_EXAMPLE
def Property(Any) → boolean
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def annotations(ModuleProperty) -> Bag of Annotation
#+END_EXAMPLE

Returns an unordered sequence of annotations attached to the property.

#+BEGIN_EXAMPLE
def container(Property) -> Module
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def is_complete(p -> Property) -> boolean
    ≔ p.body.present ∧ ∀ r in p.roles ( r.is_complete )
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def name(Property) -> Identifier
#+END_EXAMPLE

Returns the identifier naming the property.

#+BEGIN_EXAMPLE
def roles(Property) -> Bag of PropertyRole
#+END_EXAMPLE

*Class: Property Role*

#+BEGIN_EXAMPLE
def PropertyRole(Any) → boolean
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def annotations(PropertyRole) -> Bag of Annotation
#+END_EXAMPLE

Returns an unordered sequence of annotations attached to the property role.

#+BEGIN_EXAMPLE
def container(PropertyRole) -> Property
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def is_complete(r -> PropertyRole) -> boolean
    ≔ ne(type_of(r) Unknown)
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def name(PropertyRole) -> Identifier
#+END_EXAMPLE

Returns the identifier naming the property role.

#+BEGIN_EXAMPLE
def source_cardinality(PropertyRole) -> Maybe of Cardinality
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def target_type(PropertyRole) -> Type
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def target_cardinality(PropertyRole) -> Cardinality
#+END_EXAMPLE

*** Formal Constraints

TBD
