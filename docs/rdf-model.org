#+LANGUAGE: en
#+STARTUP: overview hidestars inlineimages entitiespretty

* RDF Abstract Model

The W3C's [[https://www.w3.org/RDF/][Resource Description Framework]] (RDF) is a mature standard for the open development of vocabularies and
knowledge representation. Key characteristics are that it has a fundamentally simple model, it is designed with an /open
world/ assumption, and because of this it is inherently composable. RDF's core can be summarized with the following
grammar, noting that at it's core it comprises a set of statements about things.

#+BEGIN_SRC ebnf
Graph     = Statement*
Statement = Subject Predicate Object
Subject   = Named | Anonymous
Predicate = Named
Object    = Subject | Literal
Named     = Uri
#+END_SRC

An example might be as follows where the subject of these 4 statements is some resource I have named =mytruck=. It's not
much but it's a start.

#+BEGIN_SRC ttl
:mytruck rdf:type v:Truck .
:mytruck v:make "Dodge" .
:mytruck v:model "Ram 3500" .
:mytruck v:yearModel "2009"^^xsd:int .
#+END_SRC

I then consider adding the VIN to my statements above, in the following manner.

#+BEGIN_SRC ttl
:mytruck v:hasVin "2G1FP22G522155049" .
#+END_SRC

However, I discover that my state Department of Transportation has an open dataset containing information recorded by
VIN (just FYI, my state does not provide this).

#+BEGIN_SRC ttl
dot:US_2G1FP22G522155049 rdf:type dot:VehicleRecord ;
    vso:engineDisplacement [
        rdf:type gr:QuantitativeValueFloat ;
        gr:hasValueFloat "6.7"^^xsd:float ;
        gr:hasUnitOfMeasurement "LTR"^^xsd:string
    ] ;
    dot:engineConfiguration "Inline 6-cylinder" ;
    dot:engineName dbpedia:Cummins_B_Series_engine ;
    dot:engineManufacturer dbpedia:Cummins ;
    dot:fuelType dbpedia:GasolineDiesel_fuel .
#+END_SRC

Each VIN is an addressable resource and so I can assert that my resource
named =:mytruck= is the same as the resource =dot:US_2G1FP22G522155049= which has the effect of adding any statements made
by the DOT to my record as well.

#+BEGIN_SRC ttl
:mytruck owl:sameAs dot:US_2G1FP22G522155049 .
#+END_SRC

If I now query my resource I should find that my handful of statements above now looks like this:

#+BEGIN_SRC ttl
:mytruck rdf:type v:Truck, dot:VehicleRecord ;
    owl:sameAs dot:US_2G1FP22G522155049 ;
    v:make "Dodge" ;
    v:model "Ram 3500" ;
    v:yearModel "2009"^^xsd:int ;
    vso:engineDisplacement [
        rdf:type gr:QuantitativeValueFloat ;
        gr:hasValueFloat "6.7"^^xsd:float ;
        gr:hasUnitOfMeasurement "LTR"^^xsd:string
    ] ;
    dot:engineConfiguration "Inline 6-cylinder" ;
    dot:engineName dbpedia:Cummins_B_Series_engine ;
    dot:engineManufacturer dbpedia:Cummins ;
    dot:fuelType dbpedia:GasolineDiesel_fuel .
#+END_SRC

Why is this valuable? Because it allows us easily to add new statements about things at any future point. We don't have
to worry about expanding a schema or changing table definitions we just add new statements and if their subjects are the
same they will be combined. To manage the naming of things you will have noticed that names in the examples above have
namespace prefixes and these namespaces correspond to definitions of /vocabularies/ or /ontologies/. Figure [[fig:owl-ontology]]
is an overview of the OWL Ontology for SDML. For clarity this figure elides the sub classes of /Group/ and /Member/. Those
classes in this diagram that are in a lighter color are /abstract/ in that they exist only to be super-types of the
classes actually referenced by other model elements. For more information on OWL itself, see [[https://www.w3.org/TR/owl2-overview/][OWL 2 Web Ontology Language
Document Overview (Second Edition)]] and [[https://cambridgesemantics.com/blog/semantic-university/learn-owl-rdfs/owl-references-humans/][OWL References for Humans]].

#+NAME: fig:owl-ontology
#+BEGIN_SRC dot :file owl-ontology.png :exports results
digraph G {
  bgcolor="transparent";
  rankdir="LR";
  node [fontsize=10];
  edge [fontsize=9; fontcolor=darkgrey];

  ModelElement [shape=ellipse;color=grey;fontcolor=grey];
  Module [shape=ellipse;penwidth=2.0;color=blue;fontcolor=blue];
  Cardinality [shape=ellipse];
  Classifier [shape=ellipse;color=grey;fontcolor=grey];
  Entity [shape=ellipse];
  Enumeration [shape=ellipse];
  Event [shape=ellipse];
  Group [shape=ellipse;color=grey;fontcolor=grey];
  Member [shape=ellipse;color=grey;fontcolor=grey];
  Structure [shape=ellipse];
  Union [shape=ellipse];
  EnumVariant [shape=ellipse];
  Datatype [shape=ellipse;label="rdfs:Datatype"];
  integer [shape=rectangle;style=filled;color=lightgrey;label="xsd:nonNegativeInteger"];

  Module -> ModelElement [label="rdfs:subClassOf";arrowhead=empty];
  Module -> Classifier [label="hasDefinition";dir=both;arrowtail=diamond;arrowhead=open;headlabel="*"];

  Classifier -> ModelElement [label="rdfs:subClassOf";arrowhead=empty];

  Datatype -> Classifier [label="rdfs:subClassOf";arrowhead=empty];
  Datatype -> Datatype [label="baseDatatype";dir=both;arrowtail=odiamond;arrowhead=open];

  Enumeration -> Classifier [label="rdfs:subClassOf";arrowhead=empty];
  Enumeration -> EnumVariant [label="hasVariant";dir=both;arrowtail=diamond;arrowhead=open;headlabel="*"];

  Structure -> Classifier [label="rdfs:subClassOf";arrowhead=empty];
  Structure -> Group [label="hasGroup";dir=both;arrowtail=diamond;arrowhead=open;headlabel="*"];
  Structure -> Member [label="hasMember";dir=both;arrowtail=diamond;arrowhead=open;headlabel="*"];

  Entity -> Structure [label="rdfs:subClassOf";arrowhead=empty];
  Entity -> Member [label="hasIdentifier";dir=both;arrowtail=diamond;arrowhead=open;headlabel="1"];

  Event -> Structure [label="rdfs:subClassOf";arrowhead=empty];
  Event -> Entity [label="eventSource";dir=both;arrowtail=odiamond;arrowhead=open];
  
  Union -> Classifier [label="rdfs:subClassOf";arrowhead=empty];
  Union -> Classifier [label="variantType";dir=both;arrowtail=odiamond;arrowhead=open;headlabel="+"];

  Group -> ModelElement [label="rdfs:subClassOf";arrowhead=empty];
  Group -> Member [label="hasMember";dir=both;arrowtail=diamond;arrowhead=open;headlabel="*"];

  Member -> ModelElement [label="rdfs:subClassOf";arrowhead=empty];
  Member -> Cardinality [label="sourceCardinality";dir=both;arrowtail=diamond;arrowhead=open;headlabel="?"];
  Member -> Classifier [label="targetClassifier";dir=both;arrowtail=odiamond;arrowhead=open];
  Member -> Cardinality [label="targetCardinality";dir=both;arrowtail=diamond;arrowhead=open;headlabel="?"];

  Cardinality -> integer [label="owl:maxCardinality";dir=both;arrowtail=diamond;arrowhead=open;headlabel="?"];
  Cardinality -> integer [label="owl:minCardinality";dir=both;arrowtail=diamond;arrowhead=open];

  EnumVariant -> integer [label="hasValue";dir=both;arrowtail=diamond;arrowhead=open];
}
#+END_SRC

#+CAPTION: OWL Ontology
#+RESULTS: fig:owl-ontology
[[file:owl-ontology.png]]

Figure [[fig:owl-ontology]] uses some notation elements from UML, although not a UML diagram itself. 
For a higher resolution version, [[file:owl-ontology.png][click here]].

1. Open triangular arrow heads correspond to the RDF Schema =subClassOf= relationship.
2. Filled diamonds correspond to composite associations, or strong ownership.
3. Open diamonds correspond to aggregate associations, or weak ownership.

** SDML Ontology

Listing [[lst:owl-ontology]] is the ontology header that describes the Ontology itself. This shows the use of annotation
properties from the Dublin Core [[https://www.dublincore.org/specifications/dublin-core/dcmi-terms/][DCMI Terms]] and the W3C Simple Knowledge Organization System ([[https://www.w3.org/TR/skos-reference/][SKOS]]). Section
[[sec:common-annotations]] presents details on commonly used annotation properties found in the Ontology.

#+NAME: lst:owl-ontology
#+CAPTION: OWL: Ontology Header
#+BEGIN_SRC ttl
@prefix dc: <http://purl.org/dc/elements/1.1/> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix skos: <http://www.w3.org/2004/02/skos/core#> .
@base <https://sdml.io/sdml-owl.ttl#> .

<https://sdml.io/sdml-owl.ttl#>
    rdf:type owl:Ontology ;
    skos:prefLabel "Simple Domain Modeling Language"@en ;
    skos:altLabel "SDML"@en ;
    dc:hasVersion "0.1.10" ;
    dc:creator "Simon Johnston <johntonskj@gmail.com>" ;
    dc:license <https://github.com/johnstonskj/tree-sitter-sdml/blob/main/LICENSE> ;
    rdf:seeAlso <https://sdml.io/> .
#+END_SRC

** Classes

All classes have an RDF type of =owl:Class=.

#+NAME: tbl:owl-classes
#+CAPTION: OWL: Classes
| Name               | Sub-Class Of               | Disjoint With                                 |
|--------------------+----------------------------+-----------------------------------------------|
| =:ModelElement=      | None.                      |                                               |
| =:Module=            | =:ModelElement=              |                                               |
| =:Classifier=        | =:ModelElement=              |                                               |
| =:Datatype=          | =:Classifier=, =rdfs:Datatype= | =:Enumeration= , =:Structure= , =:Union= , =:Unknown= |
| =:Entity=            | =:Structure=                 | =:Event=                                        |
| =:Enumeration=       | =:Classifier=                | =:Datatype=, =:Structure=, =:Union=, =:Unknown=       |
| =:Event=             | =:Structure=                 | =:Entity=                                       |
| =:Structure=         | =:Classifier=                | =:Datatype=, =:Enumeration=, =:Union=, =:Unknown=     |
| =:Union=             | =:Classifier=                | =:Datatype=, =:Enumeration=, =:Structure=, =:Unknown= |
| =:Unknown=           | =:Classifier=                | =:Datatype=, =:Enumeration=, =:Structure=, =:Union=   |
| =:Group=             | =:ModelElement=              |                                               |
| =:EntityGroup=       | =:Group=                     | =:StructureGroup=                               |
| =:StructureGroup=    | =:Group=                     | =:EntityGroup=                                  |
| =:Member=            | =:ModelElement=              |                                               |
| =:IdentityMember=    | =:Member=                    | =:ByValueMember=, =:ByReferenceMember=            |
| =:ByValueMember=     | =:Member=                    | =:IdentityMember=, =:ByReferenceMember=           |
| =:ByReferenceMember= | =:Member=                    | =:IdentityMember=, =:ByValueMember=               |
| =:Cardinality=       | None.                      |                                               |
| =:Variant=           | None.                      |                                               |

** Object Properties

All object properties have an RDF type of =owl:ObjectProperty=.

#+NAME: tbl:owl-object-properties
#+CAPTION: OWL: Object Properties
| Name                     | Domain                                                         | Range                     | Inverse Of     |
|--------------------------+----------------------------------------------------------------+---------------------------+----------------|
| =:hasDefinition=           | =:Module=                                                        | =:Classifier=               | =:isDefinedBy=   |
| =:isDefinedBy=             | =:Classifier=                                                    | =:Module=                   | =:hasDefinition= |
| =:entityHasGroup=          | =rdfs:Entity=                                                    | =:EntityGroup=              |                |
| =:structureHasGroup=       | =rdfs:Structure=                                                 | =:StructureGroup=           |                |
| =:hasVariant=              | =:Enumeration=                                                   | =:Variant=                  | =:isVariantOf=   |
| =:isVariantOf=             | =:Variant=                                                       | =:Enumeration=              | =:hasVariant=    |
| =:hasElementType=          | =:Union=                                                         | =:Classifier=               |                |
| =:targetClassifier=        | =:Member=                                                        | =:Classifier=               |                |
| =:baseDatatype=            | =:Datatype=                                                      | =:Datatype= ∪ =rdfs:Datatype= |                |
| =:eventSource=             | =:Event=                                                         | =:Entity=                   | =:emitsEvent=    |
| =:emitsEvent=              | =:Entity=                                                        | =:Event=                    | =:eventSource=   |
| =:hasMember=               | =:Member=                                                        | N/A                       | =:hasMember=     |
| =:isMemberOf=              | N/A                                                            | =:Member=                   | =:isMemberOf=    |
| =:hasIdentityMember= ﻿^1,2  | =:Entity=                                                        | =:IdentityMember=           |                |
| =:hasByValueMember= ﻿^2     | =:Entity= ∪ =:EntityGroup= ∪ =:Event= ∪ =:Structure= ∪ =:StructureGroup= | =:ByValueMember=            |                |
| =:hasByReferenceMember= ﻿^2 | =:Entity= ∪ =:EntityGroup=                                         | =:ByReferenceMember=        |                |
| =:targetClassifier=        | =:Member=                                                        | =:Classifier= ∪ =:Unknown=    |                |
| =:sourceCardinality=       | =:ByReferenceMember=                                             | =:Cardinality=              |                |
| =:targetCardinality=       | =:ByReferenceMember=                                             | =:Cardinality=              |                |

Notes:
1. This also has the rdf type =owl:FunctionalProperty=.
2. These are also sub-properties of =:hasMember=.

** Datatype Properties

All datatype properties have an RDF type of =owl:DatatypeProperty=.

#+NAME: tbl:owl-datatype-properties
#+CAPTION: OWL: Datatype Properties
| Name       | Sub Property Of | Domain       | Range                  |
|------------+-----------------+--------------+------------------------|
| =:maxOccurs= |                 | =:Cardinality= | =xsd:nonNegativeInteger= |
| =:minOccurs= |                 | =:Cardinality= | =xsd:nonNegativeInteger= |
| =:hasValue=  | =rdf:value=       | =:Variant=     | =xsd:nonNegativeInteger= |

** Annotation Properties

All annotation properties have an RDF type of =owl:AnnotationProperty=.

#+NAME: tbl:owl-annotation-properties
#+CAPTION: OWL: Annotation Properties
| Name             | Domain       | Range                  |
|------------------+--------------+------------------------|
| =:rootEntity=      | =:Module=      | =:Entity=                |
| =:defaultVariant=  | =:Enumeration= | =xsd:NMTOKEN=            |
| =:deprecatedSince= | N/A          | =:versionString=         |
| =:introducedIn=    | N/A          | =:versionString=         |
| =:flatten=         | =:Member=      | =Boolean=                |
| =:hasVersioningStyle= | =:Entity=      | =VersioningStyle=        |
| =:hasVersionIdType= | =:Entity=      | =:Datatype= ∪ =:Structure= |

The properties =:deprecatedSince= and =:introducedIn= both refer to a range type =:versionString=, this type is a string that
conforms to the [[https://semver.org/][semver]] form of /major.minor.path/ where each is an integer. 

#+BEGIN_SRC ttl
:versionString rdf:type rdfs:Datatype ;
    owl:onDatatype xsd:string ;
    owl:withRestrictions (
        [ xsd:pattern "(0|[1-9][0-9]*)(\.0|[1-9][0-9]*){,2}" ]
    ) .
#+END_SRC

The property =:hasVersioningStyle=, if present, denotes an entity as versioned and what form of versioning is to be applies.
The values for this property are:

- Immutable :: The user does not get to control the versioning, every mutation of the entity results in a new version
  and that version is therefore immutable and so version identifiers are maximally stable.
- Snapshot :: The user creates a new version explicitly with a specific operation. This implies that there are mutations
  of a specific version possible and so the version identifier is not necessarily stable.
- Mutable :: In this case the user has complete control over the versioning by mutation of the entity. In general this
  implies that there is some member of the entity that holds the version identifier. This results in an explicitly
  unstable identifier.

#+BEGIN_SRC ttl
:VersioningStyle rdf:type rdfs:DataRange ;
    owl:oneOf (
        "Immutable"^^xsd:string
        "Snapshot"^^xsd:string
        "Mutable"^^xsd:string
    ) .
#+END_SRC

The corresponding property =:hasVersionIdType= references the type used to represent a specific version. The default for this
is =xsd:string=.

** <<sec:common-annotations>>Commonly Used Annotations

The following are annotation properties that are common in defining and using Ontologies and other forms of controlled
vocabularies. These are all well-defined as well as commonly understood and so should be used before others in
annotating a model.

#+NAME: tbl:common-annotations
#+CAPTION: Commonly Used Annotation Properties
| Name             | Usage                                                                                          | Domain       | Range          |
|------------------+------------------------------------------------------------------------------------------------+--------------+----------------|
| =skos:prefLabel=   | The preferred lexical label/name of the model element.                                         | N/A          | =rdf:langString= |
| =skos:altLabel=    | An alternative lexical label/name for the model element.                                       | N/A          | =rdf:langString= |
| =skos:hiddenLabel= | A lexical label/name for the element where it may be searchable but not commonly displayed.    | N/A          | =rdf:langString= |
| =skos:definition=  | A complete explanation of the intended meaning of the model element.                           | N/A          | =rdf:langString= |
| =skos:historyNote= | Describes significant changes to the meaning or the form of the model element.                 | N/A          | =rdf:langString= |
| =dc:creator=       | An entity primarily responsible for making the model element.                                  | N/A          | =xsd:string=     |
| =dc:contributor=   | An entity responsible for making contributions to the model element.                           | N/A          | =xsd:string=     |
| =dc:license=       | A legal document giving official permission to do something with the model element.            | =:Module=      | =xsd:AnyURI=     |
| =dc:conformsTo=    | An established standard to which the described  model element conforms.                        | N/A          | =xsd:AnyURI=     |
| =rdfs:seeAlso=     | Used to indicate a resource that might provide additional information about the model element. | N/A          | =xsd:AnyURI=     |
| =:deprecatedSince= | The specific version at which this model element was deprecated.                               | N/A          | =:versionString= |
| =:introducedIn=    | The specific version this model element was introduced.                                        | N/A          | =:versionString= |
| =:defaultVariant=  | Denotes, if present, the default variant of an enumeration.                                    | =:EnumVariant= | =xsd:NMTOKEN=    |

