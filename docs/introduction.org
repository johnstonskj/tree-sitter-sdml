#+LANGUAGE: en
#+STARTUP: overview hidestars inlineimages entitiespretty


* Introduction

The Simple Domain Modeling Language[fn:sdml] is a small data-oriented language for constructing, documenting, and
reasoning about a conceptual domain model. For a background on domain modeling see appendix [[app:domain-modeling]]. At it's
core SDML comprises 1. an /Semantic Model/ whose structure and semantics are described by an OWL[fn:owl]/RDF[fn:rdf]
ontology (see section [[sec:rdf-semantic-model]] for more details), and 2. a /surface syntax/ for editing and sharing model
artifacts (see section [[sec:surface-syntax]] for more details). Figure [[fig:sdml-overview]] shows the relationship between
these high-level components.

This document covers both the semantic model and surface syntax representation andas well as the correspondence between
them. However, the primary focus of the documentation is the surface syntax as most users will be interacting with it
alone.

#+NAME: fig:sdml-overview
#+BEGIN_SRC dot :file sdml-overview.png :exports results
digraph G {
  bgcolor="transparent";
  rankdir="LR";
  node [fontsize=10];
  edge [fontsize=9; fontcolor=darkgrey];

  instance [shape="note"; label="My Domain\nModel"];
  sdml [shape="ellipse"; label="Surface\nSyntax"];  
  semantics [shape="ellipse"; label="Semantic\nModel"];
  rdf [shape="ellipse"; label="RDF/OWL"];

  instance -> sdml [arrowhead="open"; label="expressed-in"];
  sdml -> semantics [arrowhead="open"; label="conforms-to"];
  semantics -> rdf [arrowhead="open"; label="expressed-in"];
}
#+END_SRC

#+CAPTION: Model Overview
#+RESULTS: fig:sdml-overview
[[file:sdml-overview.png]]

The language uses some ideas from UML[fn:uml] which is often used in the construction of such models today. However, the goal is
to keep the language as small as possible, taking away some options where they don't make sense or where their use may
distract from the major purpose of the model. The model also takes some of the language from Domain-Driven Design[fn:ddd],
namely the separation of entities (/an object defined not by its attributes, but its identity/) from value objects (/an
immutable object that contains attributes but has no conceptual identity/), simply termed structures in SDML. This model
does not include the following as first-class concepts: /aggregates/, /repositories/, /factories/, or /services/.

#+BEGIN_NOTE
One element that is not included in figure [[fig:sdml-overview]], as it is primarily an implementation decision, is
that the reference implementation for SDML is provided as a Tree-Sitter[fn:ts] package. While generated tree-sitter
parsers are not intended to be fast, or to be part of a compilation processes they do provide a multitude of language
bindings, and a concrete syntax tree allowing easy development of the relatively simple tools required for SDML usage.
#+END_NOTE

** Role in Development

Figure [[fig:model-transforms]] demonstrates another key element of a /Model-Driven Development/[fn:mdd] style, the transformation
between models and between models and other development artifacts.

#+NAME: fig:model-transforms
#+BEGIN_SRC dot :file model-transforms.png :exports results
digraph G {
  bgcolor="transparent";
  rankdir="LR";
  node [fontsize=10];
  edge [fontsize=9; fontcolor=darkgrey];

  semantics [shape="ellipse"; label="Semantic\nModel"];
  transform [shape="cds"; margin="0.2,0.2"; label="Transformation"];
  tsq [shape="ellipse"; label="Tree-Sitter\nQueries"];
  other [shape="ellipse"; style="dashed"; label="Implementation\nModel(s)"];

  semantics -> transform [label="source"];
  tsq -> transform [label="selections"];
  transform -> other [label="target"];
}
#+END_SRC

#+CAPTION: Model Transformations
#+RESULTS: fig:model-transforms
[[file:model-transforms.png]]

*Example:*

In the following example 

#+NAME: fig:example-transform
#+BEGIN_SRC dot :file example-transform.png :exports results
digraph G {
  bgcolor="transparent";
  rankdir="TD";
  node [fontsize=10];
  edge [fontsize=9; fontcolor=darkgrey];

  domain [shape=ellipse; label="Domain Model"];

  docs [shape=note; label="Documentation"];
  domain -> docs [label="transformer"];

  service [shape=ellipse; label="Service Definition"; style=dotted;];
  domain -> service [label="transformer"];

  smithy [shape=component; label="Smithy"];
  service -> smithy [label="transformer"];
  
  oas [shape=component; label="OpenAPI Spec"];
  smithy -> oas [label="transformer"];

  stubs [shape=component; label="Service Stubs"];
  smithy -> stubs [label="transformer"];

  client [shape=component; label="Client Library"];
  smithy -> client [label="transformer"];

  data [shape=ellipse; label="Data Definition"; style=dotted;];
  domain -> data [label="transformer"];

  dbsql [shape=component; label="SQL DDL"]; 
  data -> dbsql [label="transformer"];

  dbjson [shape=component; label="JSON Schema"];
  data -> dbjson [label="transformer"];
  
  message [shape=ellipse; label="Message Definition"; style=dotted;];
  domain -> message [label="transformer"];

  thrift [shape=ellipse; label="Apache Thrift"];
  message -> thrift [label="transformer"];
}
#+END_SRC

#+CAPTION: Example Model Transformations
#+RESULTS: fig:example-transform
[[file:example-transform.png]]

# ----- Footnotes

[fn:sdml] Home at [[https://sdml.io/][sdmi.io]], source at [[https://github.com/johnstonskj/tree-sitter-sdml][github.com]]

[fn:owl] [[https://www.w3.org/OWL/][Web Ontology Language (OWL)]], W3C

[fn:uml] [[http://www.uml.org/][The Unified Modeling Language (UML)]], OMG

[fn:rdf] [[https://www.w3.org/RDF/][Resource Description Framework (RDF)]], W3C

[fn:ddd] [[https://en.wikipedia.org/wiki/Domain-driven_design][Domain-Driven Design]], Wikipedia

[fn:mdd] [[https://en.wikipedia.org/wiki/Model-driven_engineering][Model-Driven Development]], Wikipedia

[fn:ts]  Home at [[https://tree-sitter.github.io/tree-sitter/][Tree Sitter]], source at [[https://github.com/tree-sitter/tree-sitter][github.com]]

