#+LANGUAGE: en
#+STARTUP: overview hidestars inlineimages entitiespretty


* Introduction

The Simple Domain Modeling Language ([[https://sdml.io/][home]] | [[https://github.com/johnstonskj/tree-sitter-sdml][Github]]) is a small data-oriented language for constructing, documenting, and
reasoning about a conceptual domain model. For a background on domain modeling see appendix [[app:domain-modeling]]. At it's
core SDML comprises an /abstract model/ whose structure and semantics are described by an [[https://www.w3.org/OWL/][OWL]] ([[https://www.w3.org/RDF/][RDF]]) ontology, and a
/surface syntax/ for editing and sharing concrete models. This document covers both the OWL and SDML representations and
the correspondence between them, however the primary focus of the documentation is the surface syntax as most users will
be interacting with it alone. Figure [[fig:model-overview]] shows the relationship between these high-level components.

#+NAME: fig:model-overview
#+BEGIN_SRC dot :file sdml-overview.png :exports results
digraph G {
  bgcolor="transparent";
  rankdir="LR";
  node [fontsize=10];
  edge [fontsize=9; fontcolor=darkgrey];
  
  abstract [shape=ellipse; label="Abstract\nModel"];

  rdf [shape=ellipse; label="RDF/OWL"];
  sdml [shape=ellipse; label="Surface\nSyntax"];  
  abstract -> rdf [label="semantics"];  
  abstract -> sdml [label="syntax"];

  concrete [shape=ellipse; style=dotted; label="Concrete\nModel"];
  rdf -> concrete [arrowtail=open; dir=back; style=dotted; label="conforms-to"];
  sdml -> concrete [arrowtail=open; dir=back; style=dotted; label="expressed-in"];
}
#+END_SRC

The language uses some ideas from [[http://www.uml.org/][UML]] which is often used in the construction of such models today. However, the goal is
to keep the language as small as possible, taking away some options where they don't make sense or where their use may
distract from the major purpose of the model. The model also takes some of the language from Domain-Driven Design[fn:1],
namely the separation of entities (/an object defined not by its attributes, but its identity/) from value objects (/an
immutable object that contains attributes but has no conceptual identity/), simply termed structures in SDML. This model
does not include the following as first-class concepts: /aggregates/, /repositories/, /factories/, or /services/.

#+CAPTION: Model Overview
#+RESULTS: fig:model-overview
[[file:sdml-overview.png]]

One element that is not included in figure [[fig:model-overview]], as it is primarily an implementation decision, is
that the reference implementation for SDML is provided as a [[https://tree-sitter.github.io/tree-sitter/][Tree-Sitter]]
package. While generated tree-sitter parsers are not intended to be fast, or to be part of a compilation processes they
do provide a multitude of language bindings, and a concrete syntax tree allowing easy development of the relatively
simple tools required for SDML usage.

Figure [[fig:model-transforms]] demonstrates another key element of a /Model-Driven Development/[fn:2] style, the transformation
between models and between models and other development artifacts.

#+NAME: fig:model-transforms
#+BEGIN_SRC dot :file sdml-transforms.png :exports results
digraph G {
  bgcolor="transparent";
  rankdir="LR";
  node [fontsize=10];
  edge [fontsize=9; fontcolor=darkgrey];

  abstract [shape=ellipse; label="Abstract\nModel"];

  transform [shape=ellipse; label="Transformation"];
  transform -> abstract [label="source"];

  tsq [shape=ellipse; label="Tree-Sitter\nQueries"];
  transform -> tsq [label="using"];

  other [shape=ellipse; label="Artifact\nModel"];
  transform -> other [label="target"];
}
#+END_SRC

#+CAPTION: Model Transformations
#+RESULTS: fig:model-transforms
[[file:sdml-overview.png]]

# ----- Footnotes

[fn:1] [[https://en.wikipedia.org/wiki/Domain-driven_design][Domain-Driven Design]], Wikipedia
[fn:2] [[https://en.wikipedia.org/wiki/Model-driven_engineering][Model-Driven Development]], Wikipedia

