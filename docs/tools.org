#+TITLE: Tools
#+AUTHOR: Simon Johnston
#+EMAIL: johnstonskj@gmail.com
#+LANGUAGE: en
#+STARTUP: overview hidestars inlineimages entitiespretty


* Editor Support

** VSCode

Try here: https://github.com/georgewfraser/vscode-tree-sitter

** Emacs (< 29)

While Emacs 29 includes a builtin [[https://git.savannah.gnu.org/cgit/emacs.git/tree/lisp/treesit.el][treesit]], prior versions rely on separate [[https://emacs-tree-sitter.github.io/][tree-sitter]] and tree-sitter-/langs/ packages.
My configuration relies on [[https://github.com/jwiegley/use-package][use-package]] so you may need to adjust the following accordingly.

#+BEGIN_SRC emacs-lisp :noeval
(use-package tree-sitter :ensure t)

(use-package tree-sitter-langs :ensure t :after tree-sitter)
#+END_SRC

Now, the way this works is that there needs to be a mapping from an existing major mode to a tree-sitter parser, so
install the [[https://github.com/mnemitz/smithy-mode][smithy-mode]] from MELPA. Note that this currently targets Smithy 1.x and so not all highlighting works as
expected.

#+BEGIN_SRC emacs-lisp :noeval
(use-package smithy-mode :ensure t)
#+END_SRC

Also, the tree-sitter package is uses version 13 of the ABI, so we need to force a build with this specific version as
the Makefile by default uses "latest".

#+BEGIN_SRC bash :noeval
TS_GENERATE_ABI=13 make grammar
#+END_SRC

Now that you have the built library you need to copy it to a directory that is in the list ~tree-sitter-load-path~, or
alternatively add the =build= directory to this path. Once the library is correctly placed, load it.

#+BEGIN_SRC emacs-lisp :noeval
(tree-sitter-load 'smithy)
#+END_SRC

To ensure this worked, describe the variable ~tree-sitter-languages~ which should include an entry that looks like
~(smithy . #<user-ptr …>)~.

Now, make the connection between the major mode and newly loaded parser library.

#+BEGIN_SRC emacs-lisp :noeval
(add-to-list 'tree-sitter-major-mode-language-alist
             ('smithy-mode 'smithy))
#+END_SRC

Finally, hook =tree-sitter-mode= and =tree-sitter-hl-mode= (minor modes) to =smithy-mode= so that they are already available.

#+BEGIN_SRC emacs-lisp :noeval
(add-hook 'smithy-mode-hook #'tree-sitter-mode)
(add-hook 'smithy-mode-hook #'tree-sitter-hl-mode)
#+END_SRC

Now, open a Smithy file and try =M-x tree-sitter-debug-mode= to show the current buffer’s syntax tree in a separate buffer
or try =M-x tree-sitter-query-builder= to open the query playground.

** Emacs (>= 29)

TBD


** Neovim

[[https://neovim.io/][Neovim]] has some great tree-sitter support with the [[https://github.com/nvim-treesitter/nvim-treesitter][nvim-tree-sitter]] and a nice in-editor [[https://github.com/nvim-treesitter/playground][playground]]. Figure
[[fig:nvim-screenshot]] shows a Neovim session with a highlighted, and folded, Smithy file along with the tree-sitter
playground providing the tree view and query editor.

#+CAPTION: Neovim with Smithy
#+NAME: fig:nvim-screenshot
#+ATTR_HTML: :align center :width 80% :height 80%                                                                                                                         
[[./nvim-screenshot.png]]

Firstly, add the tree-sitter plugin, but don't install yet, as shown on the nvim-treesitter page (using [[https://github.com/junegunn/vim-plug][vim-plug]]):

#+NAME: lst:vim-ts-plugin
#+BEGIN_SRC vimrc-mode :noeval
call plug#begin()

Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}

call plug#end()
#+END_SRC

Now, add the following Lua block, using content from the homepage, and then set the ~ensure_installed~ to include the
query language and so highlight tree-sitter queries and set ~ignore_install~ to include smithy *before* installing the
tree-sitter plugin. The builtin smithy grammar will unfortunately install queries that will then be a problem so we want
to avoid that.

#+NAME: lst:vim-ts-config
#+BEGIN_SRC lua :noeval
require'nvim-treesitter.configs'.setup {
    ensure_installed = { "query" }, 
    ignore_install = { "smithy" },
    sync_install = false,
    auto_install = true,
    highlight = {
        enable = true,
        disable = {},
        additional_vim_regex_highlighting = false,
    },
    incremental_selection = {
        enable = true,
        keymaps = {
            init_selection = "gnn",
            node_incremental = "grn",
            scope_incremental = "grc",
            node_decremental = "grm",
        },
    },
    indent = {
        enable = true
    },
    query_linter = {
        enable = true,
        use_virtual_text = true,
        lint_events = {"BufWrite", "CursorHold"},
    },
}
#+END_SRC

To allow tree-sitter to do folding based on =folds.scm=, add the following to =init.vim=.

#+NAME: lst:vim-ts-folding
#+BEGIN_SRC vimrc-mode :noeval
set foldmethod=expr
set foldexpr=nvim_treesitter#foldexpr()
#+END_SRC

Once the core plugin has been installed you can add the following Lua block in =init.vim= to install /this/ grammar.

#+NAME: lst:vim-ts-add-smithy
#+BEGIN_SRC lua :noeval
local parser_config = require "nvim-treesitter.parsers".get_parser_configs()

parser_config.smithy = {
    install_info = {
        url = "https://github.com/johnstonskj/tree-sitter-smithy",
        files = {"src/parser.c"},
        generate_requires_npm = true, 
        requires_generate_from_grammar = true,  
    },
    filetype = "smithy",
    maintainers = { "@johnstonskj" },
}
#+END_SRC

Additionally, try the  [[https://github.com/nvim-treesitter/nvim-treesitter-context][nvim-treesitter-context]] and [[https://github.com/nvim-treesitter/nvim-treesitter-refactor][nvim-treesitter-refactor]] plugins based on tree-sitter.

#+NAME: lst:vim-ts-extras
#+BEGIN_SRC vimrc-mode :noeval
call plug#begin()

Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}
Plug 'nvim-treesitter/nvim-treesitter-context' 
Plug 'nvim-treesitter/playground'

call plug#end()
#+END_SRC

Add the corresponding configuration:

#+NAME: lst:vim-ts-playground-config
#+BEGIN_SRC lua :noeval
require'nvim-treesitter.configs'.setup {
    // …
    playground = {
        enable = true,
        disable = {},
        updatetime = 25,
        persist_queries = false,
        keybindings = {
            toggle_query_editor = 'o',
            toggle_hl_groups = 'i',
            toggle_injected_languages = 't',
            toggle_anonymous_nodes = 'a',
            toggle_language_display = 'I',
            focus_language = 'f',
            unfocus_language = 'F',
            update = 'R',
            goto_node = '<cr>',
            show_help = '?',
        },
    }
}
#+END_SRC

